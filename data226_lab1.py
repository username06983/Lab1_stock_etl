# -*- coding: utf-8 -*-
"""data226_lab1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1c3OiqJ1Yuxs1da-I7VYsY7N4UK9fO9rV
"""

import yfinance as yf
import pandas as pd

from airflow import DAG
from airflow.decorators import task
from airflow.providers.snowflake.hooks.snowflake import SnowflakeHook
from airflow.hooks.base import BaseHook
from airflow.utils.dates import days_ago

from datetime import timedelta
from datetime import datetime
import snowflake.connector

def return_snowflake_conn():
    hook = SnowflakeHook(snowflake_conn_id='snowflake_conn')
    conn = hook.get_conn()
    return conn

@task
def extract():
  ticker_symbols = ["MSFT", "AAPL"]

  stock_data = yf.download(ticker_symbols, period="180d", interval="1d")
  stock_data = (stock_data.stack(level=1)
              .rename_axis(['Date','Ticker'])
              .reset_index())
  df = stock_data[["Ticker", "Date", "Open", "High", "Low", "Close", "Volume"]]
  #df.dtypes
  return df

@task
def transform(df):
    df_transform = df.copy()

    # 1) Convert Date to plain date (not full timestamp)
    df_transform["Date"] = pd.to_datetime(df_transform["Date"]).dt.date

    # 2) Drop rows where Close is missing
    df_transform = df_transform.dropna(subset=["Close"])

    # 3) Remove duplicates per Ticker+Date
    df_transform = df_transform.drop_duplicates(subset=["Ticker","Date"])

    return df_transform.to_dict(orient="records")

@task
def load(records: list):
    conn = return_snowflake_conn()
    extras = (BaseHook.get_connection("snowflake_conn").extra_dejson or {})
    wh = extras.get("warehouse")
    db = extras.get("database")

    try:
      with conn.cursor() as cur:
            if wh:
                cur.execute(f'USE WAREHOUSE {wh}')
            if db:
                cur.execute(f'USE DATABASE {db}')

            target = f'{db}.STOCKS.STOCK_PRICE' if db else 'STOCKS.STOCK_PRICE'
            cur.execute(f"CREATE SCHEMA IF NOT EXISTS {db}.STOCKS")
            cur.execute(f"""
                CREATE TABLE IF NOT EXISTS {target} (
                    symbol VARCHAR NOT NULL,
                    date   DATE    NOT NULL,
                    open   FLOAT,
                    close  FLOAT,
                    high   FLOAT,
                    low    FLOAT,
                    volume NUMBER,
                    PRIMARY KEY (symbol, date)
                );
            """)
            conn.commit()
            cur.execute("BEGIN;")
            cur.execute(f"DELETE FROM {target};")

            sql = f"""
                INSERT INTO {target} (symbol, date, open, close, high, low, volume)
                VALUES (%s, TO_DATE(%s), %s, %s, %s, %s, %s)
            """
            for row in records:
                cur.execute(
                    sql,
                    (
                        str(row["Ticker"]),
                        str(row["Date"]),
                        float(row["Open"]),
                        float(row["Close"]),
                        float(row["High"]),
                        float(row["Low"]),
                        int(row["Volume"]),
                    ),
                )

            cur.execute("COMMIT;")

    except Exception as e:
        cur.execute("ROLLBACK;")
        raise
    finally:
        conn.close()

with DAG(
    dag_id="Stocks_data_ETL",
    start_date=days_ago(1),
    schedule="30 2 * * *",
    catchup=False,
    tags=["ETL"],
) as dag:

    raw_records = extract()
    records     = transform(raw_records)
    load(records=records)